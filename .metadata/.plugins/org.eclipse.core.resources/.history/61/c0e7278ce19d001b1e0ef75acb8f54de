package rs.ac.bg.etf.pp1;

import org.apache.log4j.Logger;

//import jdk.nashorn.internal.ir.VarNode;
import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;

public class SemanticPass extends VisitorAdaptor {

	int printCallCount = 0;
	int constCount = 0;
	int varDeclCount = 0;
	int varDecl = 0;
	int varDeclarationListOne = 0;
	boolean errorDetected = false;
	int nVars;
	boolean mainMetodTrue = false;
	int globVarCount = 0;
	int locVarCount = 0;
	int constVarCount = 0;
	Struct currentType = null;
	// Struct boolStruct = new Struct(Struct.Bool);
	int countOfStatementsInMain = 0;
	boolean designatorVisited = false;
	Obj designatorObject = null;
	DumpSymbolTableVisitor dumpSymbolTableVisitor = null;
	
	public static final int noCurrentType = 0;
	public static final int currentTypeInt = 1;
	public static final int currentTypeChar = 2;
	public static final int currentTypeBool = 3;

	int currentTypeId = 0;
	int currentTypeConstId = 0;
	String currentConstTypeChar = "";
	int currentTypeIntConst = 0;
	int currentConstType = 0;
	Struct currentTypeConst = Tab.noType;

	Logger log = Logger.getLogger(getClass());

	public void report_error(String message, SyntaxNode info) {
		errorDetected = true;
		StringBuilder msg = new StringBuilder(message);
		int line = (info == null) ? 0 : info.getLine();
		if (line != 0)
			msg.append(" na liniji ").append(line);
		log.error(msg.toString());
	}

	public void report_info(String message, SyntaxNode info) {
		StringBuilder msg = new StringBuilder(message);
		int line = (info == null) ? 0 : info.getLine();
		if (line != 0)
			msg.append(" na liniji ").append(line);
		log.info(msg.toString());
	}

	public boolean passed() {
		return !errorDetected;
	}

	public void visit(VarDeclListOne VarDeclListOne) {
		varDeclCount++;
		// Tab.insert(Obj.Var, VarDeclListOne.getI1(), VarDeclListOne.getI1());
//    	Obj varNode = Tab.insert(Obj.Var, VarDeclListOne.getVarName(), VarDeclListOne.getParent().getParent().getParent());
	}

	public void visit(VarDecl VarDecl) {
		varDecl++;
		Obj varNode = Tab.insert(Obj.Var, VarDecl.getVarDeclarationList().toString(), VarDecl.getType().struct);
	}

	public void visit(VarDeclarationListOne VarDeclarationListOne) {
		varDeclarationListOne++;
//    	Tab.insert(Obj.Var, VarDeclarationListOne.getVarDeclListOne(), VarDeclarationListOne.getLine());
//    	Obj varNode = Tab.insert(Obj.Var, VarDeclarationListOne.getVarDeclListOne().toString(), VarDeclarationListOne.getLine());
	}

	public void visit(PrintStatement PrintStatement) {

		if (PrintStatement.getExpr().struct.getKind() == Struct.Array) {
			if (PrintStatement.getExpr().struct.getElemType().getKind() != Struct.Int
					&& PrintStatement.getExpr().struct.getElemType().getKind() != Struct.Char) {
				report_error("Greska u PRINT naredbi, ocekivan je neki od tipova: Int, Char, Bool", null);
			}

		} else {
			if (PrintStatement.getExpr().struct.getKind() != Struct.Int
					&& PrintStatement.getExpr().struct.getKind() != Struct.Char) {
				report_error("Greska u PRINT naredbi, ocekivan je neki od tipova: Int, Char, Bool", null);
			}
		}
		printCallCount++;

		if (mainMetodTrue)
			countOfStatementsInMain++;

	}

	public void visit(ReadStatement ReadStatement) {
		if (mainMetodTrue)
			countOfStatementsInMain++;

		if (ReadStatement.getDesignator().obj.getKind() == Obj.Var) {
			if (ReadStatement.getDesignator().obj.getType().getKind() == Struct.Class) {
				report_error("Greska! U READ naredbi na liniji " + ReadStatement.getLine() + " se koristi ime klase: "
						+ designatorObject.getName(), ReadStatement);
			}
		} else {
			report_error("Greska! U READ naredbi na liniji " + ReadStatement.getLine()
					+ " se koristi neispravan naziv za argument: " + designatorObject.getName(), ReadStatement);
		}
	}

	public void visit(ProgName ProgName) {
		ProgName.obj = Tab.insert(Obj.Prog, ProgName.getProgName(), Tab.noType);
		Tab.openScope();
	}

	public void visit(Program program) {
		Tab.chainLocalSymbols(program.getProgName().obj);
		nVars = Tab.currentScope.getnVars();
		Tab.closeScope();
		if (!mainMetodTrue) {
			report_error("Program nema MAIN funkciju! Greska na liniji" + program.getLine(), null);
		}
	}

	public void visit(Type type) {

		currentType = Tab.noType;
		currentTypeId = noCurrentType;

		// nadjemo ime tipa
		Obj typeNode = Tab.find(type.getNameOfType());

		// ako ne vrati nista
		if (typeNode == Tab.noObj) {

			// od tipova imamo: none, int char, array, class, dakle za bool moramo proveriti

			if (type.getNameOfType().equals("bool")) {
				currentType = Tab.intType;
				currentTypeId = currentTypeBool;
				type.struct = Tab.intType;
			} else {
				// u tabeli simbola ne postoji ovaj tip
				report_error("Nije pronadjen tip " + type.getNameOfType() + " u tabeli simbola! ", null);
				currentType = Tab.noType;
				currentTypeId = noCurrentType;
				type.struct = Tab.noType;
			}
		} else {
			// imamo tip u tabeli simbola, znaci da je neki od: none, int char, array, class

			if (Obj.Type == typeNode.getKind()) {
				currentType = typeNode.getType();
				currentTypeId = typeNode.getType() == Tab.intType ? currentTypeInt : currentTypeChar;
				type.struct = typeNode.getType();

				// postavimo currentType za ovaj
			} else {

				// pronadjeno je u tabeli simbola, ali to nije tip
				report_error("Greska: Ime " + type.getNameOfType() + " ne predstavlja tip!", type);

				currentType = Tab.noType;
				currentTypeId = noCurrentType;
				type.struct = Tab.noType;
			}
		}
	}

	// konstante:

	public void visit(ConstDeclOne ConstDeclOne) {

		Obj varNode = Tab.find(ConstDeclOne.getNameOfConstant());
		if (varNode != Tab.noObj) {

			report_error("Greska! Konstanta " + ConstDeclOne.getNameOfConstant() + " na liniji "
					+ ConstDeclOne.getLine() + " je vec definisana!", null);
		} else {

			if (ConstDeclOne.getNameOfConstant().equals("int") || ConstDeclOne.getNameOfConstant().equals("char")
					|| ConstDeclOne.getNameOfConstant().equals("bool")
					|| ConstDeclOne.getNameOfConstant().equals("null") || ConstDeclOne.getNameOfConstant().equals("eol")
					|| ConstDeclOne.getNameOfConstant().equals("chr")
					|| ConstDeclOne.getNameOfConstant().equals("ord")) {

				report_error("Greska! Na liniji " + ConstDeclOne.getLine()
						+ " se koristi nedozvoljeno ime za lokalnu promenljivu!", null);
			}
			if (currentTypeConstId == currentTypeId) {
				// tip koji je trenutni odgovara sa tipom koji je tip ove konstante

				constCount++;
				Tab.insert(Obj.Con, ConstDeclOne.getNameOfConstant(), currentType);
				if (currentType == Tab.charType) {
					varNode.setAdr(currentConstTypeChar.charAt(1));
				}
				if (currentType == Tab.intType) {
					varNode.setAdr(currentTypeIntConst);
				}

				report_info("Definisana je konstanta " + ConstDeclOne.getNameOfConstant() + " na liniji "
						+ ConstDeclOne.getLine(), null);

			} else {

				report_error("Greska! Tip konstante " + ConstDeclOne.getNameOfConstant() + " na liniji "
						+ ConstDeclOne.getLine() + " se razlikuje od ocekivanog tipa: " + currentType, null);

			}
		}
	}

	// globalne varijable:

	public void visit(VarIdent VarIdent) {
		Obj varNode = Tab.currentScope().findSymbol(VarIdent.getNameOfVar());
		if (varNode != null) {
			report_error("Greska! Globalna promenljiva na liniji " + VarIdent.getLine() + " je vec deklarisana", null);
		} else {
			if (VarIdent.getNameOfVar().equals("int") || VarIdent.getNameOfVar().equals("char")
					|| VarIdent.getNameOfVar().equals("bool") || VarIdent.getNameOfVar().equals("null")
					|| VarIdent.getNameOfVar().equals("eol") || VarIdent.getNameOfVar().equals("chr")
					|| VarIdent.getNameOfVar().equals("ord")) {

				report_error("Greska! Na liniji " + VarIdent.getLine()
						+ " se koristi nedozvoljeno ime za globalnu promenljivu!", null);
			} else {

				if (VarIdent.getOptBrackets() instanceof OptBracketsNo) {
					// deklarisana promenljiva, ne niz
					Tab.insert(Obj.Var, VarIdent.getNameOfVar(), currentType);
					report_info("Deklarisana globalna promenljiva sa imenom: " + VarIdent.getNameOfVar() + "na liniji "
							+ VarIdent.getLine(), null);
				} else {

					// deklarisan niz

					Tab.insert(Obj.Var, VarIdent.getNameOfVar(), new Struct(Struct.Array, currentType));
					report_info("Deklarisan globalni niz sa imenom: " + VarIdent.getNameOfVar() + "na liniji "
							+ VarIdent.getLine(), null);
				}

			}

		}
	}

	// lokalne promenljive:

	public void visit(VarIdentLocal VarIdentLocal) {
		Obj varNode = Tab.currentScope().findSymbol(VarIdentLocal.getNameOfLocalVar());
		if (varNode != null) {
			report_error("Greska! Lokalna promenljiva na liniji " + VarIdentLocal.getLine() + " je vec deklarisana",
					null);
		} else {
			if (VarIdentLocal.getNameOfLocalVar().equals("int") || VarIdentLocal.getNameOfLocalVar().equals("char")
					|| VarIdentLocal.getNameOfLocalVar().equals("bool")
					|| VarIdentLocal.getNameOfLocalVar().equals("null")
					|| VarIdentLocal.getNameOfLocalVar().equals("eol")
					|| VarIdentLocal.getNameOfLocalVar().equals("chr")
					|| VarIdentLocal.getNameOfLocalVar().equals("ord")) {

				report_error("Greska! Na liniji " + VarIdentLocal.getLine()
						+ " se koristi nedozvoljeno ime za lokalnu promenljivu!", null);
			} else {

				if (VarIdentLocal.getOptBrackets() instanceof OptBracketsNo) {
					// deklarisana promenljiva, ne niz
					Tab.insert(Obj.Var, VarIdentLocal.getNameOfLocalVar(), currentType);
					report_info("Deklarisana lokalna promenljiva sa imenom: " + VarIdentLocal.getNameOfLocalVar()
							+ "na liniji " + VarIdentLocal.getLine(), null);
				} else {

					// deklarisan niz

					Tab.insert(Obj.Var, VarIdentLocal.getNameOfLocalVar(), new Struct(Struct.Array, currentType));
					report_info("Deklarisan lokalni niz sa imenom: " + VarIdentLocal.getNameOfLocalVar() + "na liniji "
							+ VarIdentLocal.getLine(), null);
				}

			}

		}
	}

	public void visit(NumConstant NumConstant) {

		currentConstType = NumConstant.getNumValue();
		currentTypeConstId = currentTypeInt;
		currentTypeConst = Tab.intType;
		NumConstant.struct = Tab.intType;

	}

	public void visit(CharConstant CharConstant) {

		currentConstTypeChar = CharConstant.getCharValue();
		currentTypeConstId = currentTypeChar;
		currentTypeConst = Tab.charType;
		CharConstant.struct = Tab.charType;

	}

	public void visit(BoolConstant BoolConstant) {
		currentConstType = BoolConstant.getBoolValue().equals("true") ? 1 : 0;
		currentTypeConstId = currentTypeBool;
		currentTypeConst = Tab.intType;
		BoolConstant.struct = Tab.intType;
	}

	public void visit(Designator Designator) {
		designatorVisited = true;
		Designator.obj = Tab.noObj;
		designatorObject = Tab.find(Designator.getDesignatorName());

		if (designatorObject != Tab.noObj) {
			if(designatorObject.getKind() == Obj.Var) {
				dumpSymbolTableVisitor = new DumpSymbolTableVisitor();
				dumpSymbolTableVisitor.visitObjNode(designatorObject);
				Designator.obj = designatorObject;
				report_info("Pretraga na " + Designator.getLine() + "(" + Designator.getDesignatorName() + "), nadjeno" + dumpSymbolTableVisitor.getOutput(), null);
			}

			 if(designatorObject.getKind()==Obj.Meth) {
				 dumpSymbolTableVisitor = new DumpSymbolTableVisitor();
				 dumpSymbolTableVisitor.visitObjNode(designatorObject);
				 report_info("Poziv funkcije: " + Designator.getDesignatorName() + " na liniji: " + Designator.getLine() + " [" + dumpSymbolTableVisitor.getOutput() + "]",null);
			
			 }
			 if(designatorObject.getKind()==Obj.Con) {
				 dumpSymbolTableVisitor = new DumpSymbolTableVisitor();
				 dumpSymbolTableVisitor.visitObjNode(designatorObject);
				 report_info("Pristup simbolickoj konstanti: " + Designator.getDesignatorName() + " na liniji: " + Designator.getLine() + " [" + dumpTable.getOutput() + "]",null);
			
			 }
			
			if(!(Designator.getOptExpr() instanceof OptExprNo)) {
				if(designatorObject.getType().getKind() != Struct.Array) {
					Designator.obj = Tab.noObj;
					report_error("Greska! Promenljiva: " + Designator.getDesignatorName() + " nije niz", Designator);
				} else {
					dumpSymbolTableVisitor = new DumpSymbolTableVisitor();
					dumpSymbolTableVisitor.visitObjNode(designatorObject);
					if(designatorObject.getLevel() != 0) {
						report_info("Pristup globalnom nizu: " + Designator.getDesignatorName() + " na liniji: " + Designator.getLine() + "[" + dumpSymbolTableVisitor.getOutput() + "]", null);
					} else {
						report_info("Pristup lokalnom nizu: " + Designator.getDesignatorName() + " na liniji: " + Designator.getLine() + "[" + dumpSymbolTableVisitor.getOutput() + "]", null);						
					}
					
				}
			} else {
				if(designatorObject.getLevel() != 0) {
					report_info("Pristup globalnoj promenljivoj: " + Designator.getDesignatorName() + " na liniji: " + Designator.getLine() + "[" + dumpSymbolTableVisitor.getOutput() + "]", null);
				} else {
					report_info("Pristup lokalnoj promenljivoj: " + Designator.getDesignatorName() + " na liniji: " + Designator.getLine() + "[" + dumpSymbolTableVisitor.getOutput() + "]", null);						
				}
			}
		} else {
			report_error("Greska! Na liniji " + Designator.getLine()
					+ " se pojavljuje simbol koji nije u tabeli simbola: " + Designator.getDesignatorName(), null);
			Designator.obj = Tab.noObj;
		}
		
		Designator.obj = designatorObject;

		}

	
	
	public void visit(FactorDesignator FactorDesignator) {
		if(FactorDesignator.getDesignator() != null) {
			if(FactorDesignator.getDesignator().obj.getType().getKind() == Struct.Array && (FactorDesignator.getDesignator().getOptExpr() instanceof OptExprNo)) {
				report_error("Greska na liniji " + FactorDesignator.getLine() + " ne sme se ovako koristiti niz", null);
				FactorDesignator.struct = Tab.noType;
			} else {
				FactorDesignator.struct = FactorDesignator.getDesignator().obj.getType();
			}
		}
	}
	}
